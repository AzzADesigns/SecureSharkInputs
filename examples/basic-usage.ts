// üìù Ejemplo B√°sico de Uso - SecureSharkInputs
// Este archivo muestra c√≥mo usar la librer√≠a paso a paso

import { createEnterpriseValidator, entryFormSchema, ValidationLogger } from 'securesharkinputs';

// ============================================================================
// 1. VALIDACI√ìN SIMPLE
// ============================================================================

console.log('üîç 1. VALIDACI√ìN SIMPLE');
console.log('========================');

// Crear validador b√°sico
const validator = createEnterpriseValidator();

// Ejemplo 1: Texto normal (deber√≠a pasar)
async function validateNormalText() {
  const result = await validator.validate("Hola, ¬øc√≥mo est√°s?");
  console.log('‚úÖ Texto normal:', result.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
  return result;
}

// Ejemplo 2: XSS attempt (deber√≠a fallar)
async function validateXSSAttempt() {
  const result = await validator.validate("<script>alert('xss')</script>");
  console.log('‚ùå XSS attempt:', result.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
  console.log('   Raz√≥n:', result.reason);
  return result;
}

// Ejemplo 3: SQL injection (deber√≠a fallar)
async function validateSQLInjection() {
  const result = await validator.validate("SELECT * FROM users");
  console.log('‚ùå SQL injection:', result.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
  console.log('   Raz√≥n:', result.reason);
  return result;
}

// Ejemplo 4: Contenido inapropiado (deber√≠a fallar)
async function validateInappropriateContent() {
  const result = await validator.validate("Este texto contiene puta");
  console.log('‚ùå Contenido inapropiado:', result.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
  console.log('   Raz√≥n:', result.reason);
  return result;
}

// ============================================================================
// 2. VALIDACI√ìN DE FORMULARIOS
// ============================================================================

console.log('\nüìã 2. VALIDACI√ìN DE FORMULARIOS');
console.log('================================');

// Datos de formulario v√°lidos
const validFormData = {
  email: "usuario@empresa.com",
  firstName: "Juan",
  lastName: "P√©rez",
  age: 25,
  phone: "+1234567890",
  country: "M√©xico",
  role: "Desarrollador",
  linkedin: "https://linkedin.com/in/juanperez",
  expectations: "Quiero contribuir a proyectos innovadores y aprender nuevas tecnolog√≠as."
};

// Datos de formulario inv√°lidos (con contenido malicioso)
const invalidFormData = {
  email: "usuario@empresa.com",
  firstName: "Juan",
  lastName: "P√©rez",
  age: 25,
  phone: "+1234567890",
  country: "M√©xico",
  role: "Desarrollador",
  linkedin: "https://linkedin.com/in/juanperez",
  expectations: "Quiero contribuir a proyectos innovadores. <script>alert('xss')</script>"
};

async function validateForm(formData: any, description: string) {
  try {
    console.log(`\nüìù ${description}:`);
    const validatedData = await entryFormSchema.validate(formData);
    console.log('   ‚úÖ Formulario V√ÅLIDO');
    console.log('   üìä Datos validados:', validatedData);
    return { success: true, data: validatedData };
  } catch (error: any) {
    console.log('   ‚ùå Formulario INV√ÅLIDO');
    console.log('   üö® Error:', error.message);
    return { success: false, error: error.message };
  }
}

// ============================================================================
// 3. CONFIGURACI√ìN AVANZADA
// ============================================================================

console.log('\n‚öôÔ∏è 3. CONFIGURACI√ìN AVANZADA');
console.log('=============================');

// Validador con configuraci√≥n personalizada
const advancedValidator = createEnterpriseValidator({
  enableLogging: true,
  maxInputLength: 500,
  logLevel: 'info',
  allowedEmailDomains: ['empresa.com']
});

async function validateWithAdvancedConfig() {
  console.log('\nüîß Validaci√≥n con configuraci√≥n avanzada:');
  
  // Texto muy largo (deber√≠a fallar)
  const longText = "A".repeat(600);
  const result1 = await advancedValidator.validate(longText);
  console.log('   üìè Texto largo:', result1.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
  console.log('   Raz√≥n:', result1.reason);
  
  // Texto normal (deber√≠a pasar)
  const normalText = "Texto normal";
  const result2 = await advancedValidator.validate(normalText);
  console.log('   ‚úÖ Texto normal:', result2.isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
}

// ============================================================================
// 4. LOGGING DE AMENAZAS
// ============================================================================

console.log('\nüìä 4. LOGGING DE AMENAZAS');
console.log('==========================');

async function demonstrateLogging() {
  console.log('\nüîç Ejecutando validaciones para generar logs...');
  
  // Ejecutar algunas validaciones
  await validator.validate("Texto normal");
  await validator.validate("<script>alert('xss')</script>");
  await validator.validate("SELECT * FROM users");
  await validator.validate("Este texto tiene puta");
  
  // Obtener logs
  const logger = ValidationLogger.getInstance();
  const logs = logger.getLogs();
  
  console.log('\nüìã Logs de amenazas detectadas:');
  logs.forEach((log, index) => {
    console.log(`   ${index + 1}. [${log.level.toUpperCase()}] ${log.message}`);
    if (log.detectedThreats && log.detectedThreats.length > 0) {
      console.log(`      Amenazas: ${log.detectedThreats.join(', ')}`);
    }
  });
  
  // Limpiar logs
  logger.clearLogs();
  console.log('\nüßπ Logs limpiados');
}

// ============================================================================
// 5. FUNCI√ìN PRINCIPAL
// ============================================================================

async function main() {
  console.log('üöÄ SECURESHARKINPUTS - EJEMPLO B√ÅSICO');
  console.log('=======================================\n');
  
  try {
    // 1. Validaci√≥n simple
    await validateNormalText();
    await validateXSSAttempt();
    await validateSQLInjection();
    await validateInappropriateContent();
    
    // 2. Validaci√≥n de formularios
    await validateForm(validFormData, "Formulario V√°lido");
    await validateForm(invalidFormData, "Formulario con XSS");
    
    // 3. Configuraci√≥n avanzada
    await validateWithAdvancedConfig();
    
    // 4. Logging
    await demonstrateLogging();
    
    console.log('\nüéâ ¬°Ejemplo completado exitosamente!');
    console.log('üìö Revisa la documentaci√≥n para m√°s ejemplos.');
    
  } catch (error) {
    console.error('‚ùå Error en el ejemplo:', error);
  }
}

// Ejecutar el ejemplo
if (require.main === module) {
  main();
}

export {
  validateNormalText,
  validateXSSAttempt,
  validateSQLInjection,
  validateInappropriateContent,
  validateForm,
  validateWithAdvancedConfig,
  demonstrateLogging,
  main
}; 